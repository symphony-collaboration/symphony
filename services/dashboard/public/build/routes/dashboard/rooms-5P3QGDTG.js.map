{
  "version": 3,
  "sources": ["../../../../app/components/Table.tsx", "../../../../node_modules/@tanstack/table-core/src/utils.ts", "../../../../node_modules/@tanstack/table-core/src/core/column.ts", "../../../../node_modules/@tanstack/table-core/src/core/headers.ts", "../../../../node_modules/@tanstack/table-core/src/features/ColumnSizing.ts", "../../../../node_modules/@tanstack/table-core/src/features/Expanding.ts", "../../../../node_modules/@tanstack/table-core/src/filterFns.ts", "../../../../node_modules/@tanstack/table-core/src/features/Filters.ts", "../../../../node_modules/@tanstack/table-core/src/aggregationFns.ts", "../../../../node_modules/@tanstack/table-core/src/features/Grouping.ts", "../../../../node_modules/@tanstack/table-core/src/features/Ordering.ts", "../../../../node_modules/@tanstack/table-core/src/features/Pagination.ts", "../../../../node_modules/@tanstack/table-core/src/features/Pinning.ts", "../../../../node_modules/@tanstack/table-core/src/features/RowSelection.ts", "../../../../node_modules/@tanstack/table-core/src/sortingFns.ts", "../../../../node_modules/@tanstack/table-core/src/features/Sorting.ts", "../../../../node_modules/@tanstack/table-core/src/features/Visibility.ts", "../../../../node_modules/@tanstack/table-core/src/core/table.ts", "../../../../node_modules/@tanstack/table-core/src/core/cell.ts", "../../../../node_modules/@tanstack/table-core/src/core/row.ts", "../../../../node_modules/@tanstack/table-core/src/columnHelper.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../../../node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../../../node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../../../node_modules/@tanstack/react-table/src/index.tsx", "../../../../app/components/TableColumns.tsx", "../../../../app/shared/utils.ts", "../../../../app/routes/dashboard/rooms.tsx"],
  "sourcesContent": ["import { useState } from \"react\";\n\nimport {\n  useReactTable,\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n} from \"@tanstack/react-table\";\n\nimport type { ColumnDef, SortingState } from \"@tanstack/react-table\";\n\nexport type TableProps<Data extends object> = {\n  data: Data[];\n  columns: ColumnDef<Data, any>[];\n};\n\nexport function Table<Data extends object>({\n  data,\n  columns,\n}: TableProps<Data>) {\n  const [sorting, setSorting] = useState<SortingState>([]);\n  const table = useReactTable({\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  });\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full divide-y-2 divide-gray-200 text-sm\">\n        <thead>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <tr key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <th\n                  key={header.id}\n                  className=\"whitespace-nowrap py-2 text-left font-medium text-gray-900\"\n                >\n                  {flexRender(\n                    header.column.columnDef.header,\n                    header.getContext()\n                  )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody className=\"divide-y divide-gray-200\">\n          {table.getRowModel().rows.map((row) => (\n            <tr key={row.id}>\n              {row.getVisibleCells().map((cell) => (\n                <td key={cell.id} className=\"whitespace-nowrap py-2 font-medium text-gray-900\">\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n", "import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n", "import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n", "import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n", "import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n", "import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n", "import { createColumnHelper } from \"@tanstack/react-table\";\nimport type { Room } from \"./types\";\n\nconst columnHelper = createColumnHelper<Room>();\n\nconst columns = [\n  columnHelper.accessor((row) => row.name, {\n    id: \"roomName\",\n    cell: (info) => info.getValue(),\n    header: () => \"Room Name\",\n  }),\n\n  columnHelper.accessor(\n    (row) => (row.active ? \"Active\" : new Date(row.updatedAt).toLocaleString()),\n    {\n      id: \"lastUpdatedAt\",\n      cell: (info) => info.getValue() || \"2020\",\n      header: () => \"Last Updated At\",\n    }\n  ),\n\n  columnHelper.accessor((row) => row.bytes, {\n    id: \"storageSize\",\n    cell: (info) => info.getValue(),\n    header: () => \"Storage Size (Bytes)\",\n  }),\n\n  columnHelper.display({\n    id: \"actions\",\n    cell: (props) => (\n      <td className=\"whitespace-nowrap py-2\">\n        <a\n          href=\"/rooms/dashboard\"\n          className=\"inline-block rounded bg-indigo-600 px-4 py-2 text-xs font-medium text-white hover:bg-indigo-700\"\n        >\n          View\n        </a>\n      </td>\n    ),\n  }),\n];\n\nexport default columns;\n", "export const getCurrent24HrTime = (): string => {\n  const now = new Date();\n  const hours = now.getHours().toString().padStart(2, \"0\");\n  const minutes = now.getMinutes().toString().padStart(2, \"0\");\n  const time = `${hours}:${minutes}`;\n  return time;\n};\n\nexport const pluralize = (count: number, noun: string, suffix = 's') => {\n  return `${count} ${noun}${count !== 1 ? suffix : ''}`;\n}\n", "import { Table } from \"~/components/Table\";\nimport type { Room } from \"~/components/types\";\nimport columns from \"~/components/TableColumns\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { pluralize } from \"~/shared/utils\";\nimport { getAllRooms } from \"~/utils/rooms\";\n\nexport const loader = async () => {\n  // const response = await fetch(`${process.env.SERVER_URL}/rooms`);\n  // const rooms = await response.json();\n\n  // rooms.forEach((room: Room) => (room.name = room.name.split(\"/\").at(-1)!)); // remove after room names fixed in database\n\n  // return rooms;\n\n  return getAllRooms()\n};\n\nexport default function Rooms() {\n  const rooms = useLoaderData<Room[]>();\n\n  return (\n    <>\n      <header className=\"mb-8\">\n        <strong className=\"block font-medium text-gray-900 mb-5\">Rooms</strong>\n      </header>\n      <Table columns={columns} data={rooms} />\n      <p className=\"mt-1 text-sm text-gray-700\">\n        {pluralize(rooms.length, \"room\", \"s\")}\n      </p>\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["functionalUpdate", "updater", "input", "makeStateUpdater", "key", "instance", "updater", "setState", "old", "functionalUpdate", "isFunction", "d", "Function", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "createColumn", "table", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "id", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "warn", "process", "Error", "column", "columns", "getFlatColumns", "_column$columns", "flatMap", "_table$options$debugA", "options", "debugAll", "debugColumns", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "_table$options$debugA2", "_features", "reduce", "obj", "feature", "Object", "assign", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "getContext", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "columnId", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "debugHeaders", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "_table$options$debugA3", "getRightHeaderGroups", "_right$map$filter2", "_table$options$debugA4", "getFooterGroups", "reverse", "_table$options$debugA5", "getLeftFooterGroups", "_table$options$debugA6", "getCenterFooterGroups", "_table$options$debugA7", "getRightFooterGroups", "_table$options$debugA8", "getFlatHeaders", "headers", "_table$options$debugA9", "getLeftFlatHeaders", "_table$options$debugA10", "getCenterFlatHeaders", "_table$options$debugA11", "getRightFlatHeaders", "_table$options$debugA12", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "_table$options$debugA13", "getLeftLeafHeaders", "_header$subHeaders2", "_table$options$debugA14", "getRightLeafHeaders", "_header$subHeaders3", "_table$options$debugA15", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "_table$options$debugA16", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "defaultColumnSizing", "size", "minSize", "maxSize", "Number", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "getDefaultColumnDef", "getInitialState", "state", "columnSizing", "columnSizingInfo", "getDefaultOptions", "columnResizeMode", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "position", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "findIndex", "prevSiblingColumn", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "_column$columnDef$ena", "_table$options$enable", "enableResizing", "enableColumnResizing", "getIsResizing", "sum", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "getColumn", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "_ref3", "headerSize", "onMove", "onEnd", "mouseEvents", "moveHandler", "upHandler", "document", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "defaultState", "_table$initialState$c", "initialState", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "noop", "window", "err", "type", "Expanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "_table$initialState", "getCanSomeRowsExpand", "getPrePaginationRowModel", "flatRows", "row", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "values", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "createRow", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "_row$subRows", "getRowCanExpand", "enableExpanding", "subRows", "getToggleExpandedHandler", "canExpand", "includesString", "filterValue", "_row$getValue", "_row$getValue$toStrin", "_row$getValue$toStrin2", "search", "toLowerCase", "getValue", "toString", "autoRemove", "val", "testFalsey", "includesStringSensitive", "_row$getValue2", "_row$getValue2$toStri", "equalsString", "_row$getValue3", "_row$getValue3$toStri", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "isNaN", "Infinity", "temp", "filterFns", "Filters", "filterFn", "columnFilters", "globalFilter", "onColumnFiltersChange", "onGlobalFilterChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "_table$getCoreRowMode2", "value", "getCoreRowModel", "_getAllCellsByColumnId", "getAutoFilterFn", "firstRow", "Array", "isArray", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getCanGlobalFilter", "_column$columnDef$ena2", "_table$options$enable3", "_table$options$enable4", "_table$options$getCol", "enableGlobalFilter", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "_table$getState$colum4", "setFilterValue", "setColumnFilters", "previousfilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "columnFiltersMeta", "getGlobalAutoFilterFn", "getGlobalFilterFn", "_table$options$filter3", "_table$options$filter4", "getAllLeafColumns", "updateFn", "_functionalUpdate", "setGlobalFilter", "resetGlobalFilter", "resetColumnFilters", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "unique", "from", "Set", "uniqueCount", "_columnId", "aggregationFns", "Grouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "_groupingValuesCache", "createCell", "cell", "getIsPlaceholder", "getIsAggregated", "nonGroupingColumns", "col", "groupingColumns", "g", "Ordering", "columnOrder", "onColumnOrderChange", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "Pagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "_table$initialState$p3", "resetPageSize", "_table$initialState$p4", "_table$initialState2", "_table$initialState2$", "setPageSize", "topRowIndex", "floor", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "i", "debugTable", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "rows", "getDefaultPinningState", "Pinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "allCells", "leftAndRight", "debugRows", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "_table$initialState$r", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "target", "checked", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "selectedRowIds", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "getToggleSelectedHandler", "canSelect", "_target", "getRow", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "allChildrenSelected", "someSelected", "subRow", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "a", "b", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sort", "sortingFns", "Sorting", "sorting", "sortingFn", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "slice", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "Visibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "enableHiding", "getToggleVisibilityHandler", "getAllCells", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "features", "_options$initialState", "defaultOptions", "mergeOptions", "coreInitialState", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "acc", "getRenderValue", "_cell$getValue", "renderFallbackValue", "original", "rowIndex", "parentId", "_valuesCache", "_uniqueValuesCache", "hasOwnProperty", "getUniqueValues", "getLeafRows", "getParentRow", "getParentRows", "parentRows", "currentRow", "parentRow", "createColumnHelper", "accessor", "display", "group", "data", "accessRows", "originalRows", "getSubRows", "_row$originalSubRows", "originalSubRows", "getSortedRowModel", "table", "memo", "getState", "sorting", "getPreSortedRowModel", "rowModel", "rows", "length", "sortingState", "sortedFlatRows", "availableSorting", "filter", "sort", "_table$getColumn", "getColumn", "id", "getCanSort", "columnInfoById", "forEach", "sortEntry", "column", "sortUndefined", "columnDef", "invertSorting", "sortingFn", "getSortingFn", "sortData", "sortedData", "rowA", "rowB", "i", "_sortEntry$desc", "columnInfo", "isDesc", "desc", "aValue", "getValue", "bValue", "aUndefined", "bUndefined", "sortInt", "index", "row", "_row$subRows", "push", "subRows", "flatRows", "rowsById", "key", "debug", "_table$options$debugA", "options", "debugAll", "debugTable", "onChange", "_autoResetPageIndex", "flexRender", "Comp", "props", "isReactComponent", "React", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater", "columns", "import_jsx_dev_runtime", "count", "import_jsx_dev_runtime"]
}
