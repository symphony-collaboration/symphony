{
  "version": 3,
  "sources": ["../../../node_modules/@remix-run/router/history.ts", "../../../node_modules/@remix-run/router/utils.ts", "../../../node_modules/@remix-run/router/router.ts", "../../../node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts", "../../../node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimServer.ts", "../../../node_modules/react-router/lib/use-sync-external-store-shim/index.ts", "../../../node_modules/react-router/lib/context.ts", "../../../node_modules/react-router/lib/hooks.tsx", "../../../node_modules/react-router/lib/components.tsx", "../../../node_modules/react-router/index.ts"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      to,\n      future,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      href,\n      future,\n      opts,\n      true\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  future: FutureConfig,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n", "/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  \"useSyncExternalStore\" in React\n    ? ((module) => module.useSyncExternalStore)(React)\n    : shim;\n", "import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n", "import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  Router as RemixRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext || undefined\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own&nbsp;\n          <code style={codeStyles}>ErrorBoundary</code> prop on&nbsp;\n          <code style={codeStyles}>&lt;Route&gt;</code>\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      if (match.route.ErrorBoundary) {\n        errorElement = <match.route.ErrorBoundary />;\n      } else if (match.route.errorElement) {\n        errorElement = match.route.errorElement;\n      } else {\n        errorElement = <DefaultErrorComponent />;\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode = outlet;\n      if (error) {\n        children = errorElement;\n      } else if (match.route.Component) {\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{ outlet, matches }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (args) => {\n      return typeof shouldBlock === \"function\"\n        ? !!shouldBlock(args)\n        : !!shouldBlock;\n    },\n    [shouldBlock]\n  );\n\n  let blocker = router.getBlocker(blockerKey, blockerFunction);\n\n  // Cleanup on unmount\n  React.useEffect(\n    () => () => router.deleteBlocker(blockerKey),\n    [router, blockerKey]\n  );\n\n  // Prefer the blocker from state since DataRouterContext is memoized so this\n  // ensures we update on blocker state updates\n  return state.blockers.get(blockerKey) || blocker;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n", "import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  RouterState,\n  To,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  let getState = React.useCallback(() => router.state, [router]);\n\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    getState,\n    // We have to provide this so React@18 doesn't complain during hydration,\n    // but we pass our serialized hydration data into the router so state here\n    // is already synced with what the server saw\n    getState\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={router.basename}\n            location={router.state.location}\n            navigationType={router.state.historyAction}\n            navigator={navigator}\n          >\n            {router.state.initialized ? <Routes /> : fallbackElement}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  let dataRouterContext = React.useContext(DataRouterContext);\n  // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n  let routes =\n    dataRouterContext && !children\n      ? (dataRouterContext.router.routes as DataRouteObject[])\n      : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n", "import type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Blocker,\n  BlockerFunction,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n  LazyRouteFunction,\n  FutureConfig,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  RelativeRoutingType,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker as unstable_Blocker,\n  BlockerFunction as unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker as unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nfunction detectErrorBoundary(route: RouteObject) {\n  if (__DEV__) {\n    if (route.Component && route.element) {\n      warning(\n        false,\n        \"You should not include both `Component` and `element` on your route - \" +\n          \"`element` will be ignored.\"\n      );\n    }\n    if (route.ErrorBoundary && route.errorElement) {\n      warning(\n        false,\n        \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" +\n          \"`errorElement` will be ignored.\"\n      );\n    }\n  }\n\n  // Note: this check also occurs in createRoutesFromChildren so update\n  // there if you change this\n  return Boolean(route.ErrorBoundary) || Boolean(route.errorElement);\n}\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    future?: FutureConfig;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  detectErrorBoundary as UNSAFE_detectErrorBoundary,\n};\n"],
  "mappings": "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",
  "names": ["createBrowserHistory", "options", "createBrowserLocation", "window", "globalHistory", "pathname", "search", "hash", "location", "createLocation", "state", "usr", "key", "createBrowserHref", "to", "createPath", "getUrlBasedHistory", "invariant", "value", "message", "Error", "warning", "cond", "console", "warn", "e", "createKey", "Math", "random", "toString", "substr", "getHistoryState", "index", "idx", "current", "parsePath", "charAt", "path", "parsedPath", "hashIndex", "indexOf", "searchIndex", "getLocation", "createHref", "validateLocation", "document", "defaultView", "v5Compat", "history", "action", "Action", "Pop", "listener", "getIndex", "replaceState", "handlePop", "nextIndex", "delta", "push", "Push", "historyState", "url", "pushState", "error", "assign", "replace", "Replace", "createURL", "base", "origin", "href", "URL", "listen", "fn", "addEventListener", "PopStateEventType", "removeEventListener", "encodeLocation", "go", "n", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "detectErrorBoundary", "parentPath", "manifest", "map", "treePath", "id", "join", "children", "indexRoute", "hasErrorBoundary", "pathOrLayoutRoute", "undefined", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "length", "matchRouteBranch", "safelyDecodeURI", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "startsWith", "slice", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "initialScore", "some", "isSplat", "splatPenalty", "indexRouteValue", "filter", "s", "reduce", "segment", "paramRe", "test", "dynamicSegmentValue", "emptySegmentValue", "staticSegmentValue", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "match", "matchPath", "Object", "params", "pathnameBase", "normalizePathname", "pattern", "matcher", "paramNames", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "safelyDecodeURIComponent", "regexpSource", "_", "RegExp", "decodeURI", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "JSON", "stringify", "getPathContributingMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "isTrackedPromise", "Promise", "_tracked", "unwrapTrackedPromise", "_error", "_data", "isRouteErrorResponse", "status", "statusText", "internal", "createRouter", "init", "defaultDetectErrorBoundary", "dataRoutes", "inFlightDataRoutes", "future", "v7_normalizeFormMethod", "unlistenHistory", "subscribers", "Set", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "initialized", "m", "lazy", "loader", "router", "historyAction", "navigation", "IDLE_NAVIGATION", "restoreScrollPosition", "preventScrollReset", "revalidation", "loaderData", "actionData", "errors", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "size", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextLocation", "updateBlocker", "proceed", "reset", "deleteBlocker", "updateState", "startNavigation", "dispose", "clear", "abort", "deleteFetcher", "subscribe", "add", "delete", "newState", "subscriber", "completeNavigation", "isActionReload", "formMethod", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "getSavedScrollPosition", "navigate", "opts", "submission", "normalizeNavigateOptions", "userReplace", "formAction", "pendingError", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "AbortController", "request", "createClientSideRequest", "signal", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "Request", "handleLoaders", "fetcherSubmission", "actionMatch", "getTargetMatch", "type", "ResultType", "method", "routeId", "callLoaderOrAction", "aborted", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "data", "formEncType", "formData", "activeSubmission", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "rf", "fetcher", "get", "revalidatingFetcher", "set", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "redirect", "findRedirect", "processLoaderData", "deferredData", "done", "markFetchRedirectsDone", "didAbortFetchLoads", "abortStaleFetchLoads", "getFetcher", "IDLE_FETCHER", "fetch", "isServer", "has", "abortFetcher", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "abortController", "fetchRequest", "actionResult", "loadingFetcher", "isFetchActionRedirect", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "r", "doneFetcher", "resolveDeferredData", "redirectLocation", "_isFetchActionRedirect", "ABSOLUTE_URL_REGEX", "isBrowser", "isDifferentBasename", "redirectHistoryAction", "redirectPreserveMethodStatusCodes", "currentMatches", "fetchersToLoad", "all", "f", "resolveDeferredResults", "controller", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "IDLE_BLOCKER", "newBlocker", "entries", "Array", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "cancel", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "userMatches", "createUseMatchesMatch", "_internalSetRoutes", "newRoutes", "_internalFetchControllers", "_internalActiveDeferreds", "isSubmissionNavigation", "isFetcher", "isValidMethod", "toUpperCase", "stripHashFromPath", "searchParams", "convertFormDataToSearchParams", "hasNakedIndexQuery", "append", "getLoaderMatchesUntilBoundary", "boundaryId", "boundaryMatches", "findIndex", "values", "currentUrl", "nextUrl", "defaultShouldRevalidate", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "routeChoice", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "immutableRouteKeys", "isStaticRequest", "isRouteRequest", "requestContext", "resultType", "onReject", "runHandler", "handler", "reject", "abortPromise", "race", "context", "isResponse", "redirectStatusCodes", "headers", "activeMatches", "resolvedLocation", "protocol", "isSameBasename", "response", "contentType", "json", "text", "ErrorResponse", "statusCode", "isDeferredData", "deferred", "Headers", "body", "URLSearchParams", "File", "name", "processRouteLoaderData", "foundError", "loaderHeaders", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "find", "errorMessage", "resolveData", "validRequestMethods", "validMutationMethods", "isRevalidatingLoader", "then", "unwrap", "unwrappedData", "getAll", "v", "handle", "pathMatches", "AbortedDeferredError", "DeferredData", "validMutationMethodsArr", "validRequestMethodsArr", "UNSAFE_DEFERRED_SYMBOL", "paths", "constructor", "responseInit", "pendingKeysSet", "deferredKeys", "isArray", "onAbort", "unlistenAbortSignal", "acc", "trackPromise", "promise", "onSettle", "catch", "defineProperty", "emit", "settledKey", "k", "resolve", "pendingKeys", "Response", "createElement", "Boolean", "Symbol", "isPolyfill", "x", "y", "useSyncExternalStore", "subscribe", "getSnapshot", "getServerSnapshot", "didWarnOld18Alpha", "React", "console", "error", "value", "didWarnUncachedGetSnapshot", "cachedValue", "is", "inst", "forceUpdate", "useState", "useLayoutEffect", "checkIfSnapshotChanged", "useEffect", "handleStoreChange", "useDebugValue", "latestGetSnapshot", "prevValue", "nextValue", "useHref", "to", "relative", "useInRouterContext", "invariant", "basename", "navigator", "useContext", "NavigationContext", "hash", "pathname", "search", "useResolvedPath", "joinedPathname", "joinPaths", "createHref", "LocationContext", "useLocation", "location", "useNavigate", "matches", "RouteContext", "locationPathname", "routePathnamesJson", "JSON", "stringify", "getPathContributingMatches", "map", "match", "pathnameBase", "activeRef", "useRef", "current", "navigate", "useCallback", "options", "warning", "go", "path", "resolveTo", "parse", "replace", "push", "state", "useOutlet", "context", "outlet", "useMemo", "useRoutes", "routes", "locationArg", "dataRouterStateContext", "DataRouterStateContext", "parentMatches", "routeMatch", "length", "parentParams", "params", "parentPathname", "parentPathnameBase", "parentRoute", "route", "parentPath", "warningOnce", "endsWith", "locationFromContext", "parsedLocationArg", "parsePath", "startsWith", "remainingPathname", "slice", "matchRoutes", "element", "undefined", "Component", "renderedMatches", "_renderMatches", "Object", "assign", "encodeLocation", "_extends", "key", "navigationType", "NavigationType", "Pop", "DefaultErrorComponent", "useRouteError", "message", "isRouteErrorResponse", "status", "statusText", "Error", "stack", "lightgrey", "preStyles", "padding", "backgroundColor", "codeStyles", "devInfo", "fontStyle", "RenderedRoute", "routeContext", "children", "dataRouterContext", "DataRouterContext", "static", "staticContext", "errorElement", "ErrorBoundary", "_deepestRenderedBoundaryId", "id", "dataRouterState", "errors", "errorIndex", "findIndex", "m", "Math", "min", "reduceRight", "index", "concat", "getChildren", "getDataRouterConsoleError", "hookName", "useDataRouterState", "useRouteContext", "useCurrentRouteId", "thisRoute", "useNavigation", "DataRouterStateHook", "UseNavigation", "navigation", "useMatches", "loaderData", "UseMatches", "data", "handle", "useLoaderData", "UseLoaderData", "routeId", "RouteErrorContext", "UseRouteError", "useAsyncValue", "AwaitContext", "_data", "useAsyncError", "_error", "cond", "alreadyWarned", "RouterProvider", "fallbackElement", "router", "getState", "useSyncExternalStoreShim", "n", "opts", "preventScrollReset", "historyAction", "initialized", "Outlet", "props", "Route", "_props", "Router", "basenameProp", "locationProp", "staticProp", "navigationContext", "locationContext", "trailingPathname", "stripBasename", "Routes", "createRoutesFromChildren", "Await", "resolve", "ResolveAwait", "toRender", "Children", "forEach", "isValidElement", "treePath", "type", "Fragment", "apply", "name", "join", "caseSensitive", "loader", "action", "hasErrorBoundary", "shouldRevalidate", "lazy", "detectErrorBoundary", "Boolean", "canUseDOM", "isServerEnvironment", "shim", "OutletContext", "RenderErrorBoundary", "DataRouterHook", "AwaitRenderStatus", "neverSettledPromise", "AwaitErrorBoundary", "window", "document", "createElement", "server", "client", "module", "createContext", "displayName", "constructor", "getDerivedStateFromError", "getDerivedStateFromProps", "componentDidCatch", "errorInfo", "render", "component", "Promise", "promise", "pending", "success", "defineProperty", "get", "renderError", "reject", "catch", "_tracked", "then", "AbortedDeferredError"]
}
